// <auto-generated />
using System;
using GoodFood.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GoodFood.Infrastructure.Migrations
{
    [DbContext(typeof(GoodFoodDbContext))]
    [Migration("20250809221159_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GoodFood.Infrastructure.Persistence.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GoodFood.Infrastructure.Persistence.Models.CartData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TimeUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("GoodFood.Infrastructure.Persistence.Models.CartLineData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("CartLines");
                });

            modelBuilder.Entity("GoodFood.Infrastructure.Persistence.Models.FoodCategoryData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FoodCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "غذای ایرانی"
                        },
                        new
                        {
                            Id = 2,
                            Name = "خوراک"
                        },
                        new
                        {
                            Id = 3,
                            Name = "اقتصادی"
                        },
                        new
                        {
                            Id = 4,
                            Name = "پیش غذا"
                        },
                        new
                        {
                            Id = 5,
                            Name = "نوشیدنی"
                        });
                });

            modelBuilder.Entity("GoodFood.Infrastructure.Persistence.Models.FoodData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            Description = "80 گرم گوشت گوسفندی، 250 گرم برنج محلی",
                            ImagePath = "8.jpg",
                            Name = "چلو خورشت قیمه"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            Description = "80 گرم گوشت گوسفندی، 250 گرم برنج محلی",
                            ImagePath = "9.jpg",
                            Name = "چلو خورشت قورمه"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            Description = "200 گرم گوشت، 250 گرم برنج محلی",
                            ImagePath = "10.jpg",
                            Name = "سبزی پلو با گوشت"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 4,
                            Description = "کاهو، گوجه، خیار، هویج رنده شده",
                            ImagePath = "12.jpg",
                            Name = "سالاد فصل"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 4,
                            Description = "ماست بورانی",
                            ImagePath = "13.jpg",
                            Name = "ماست"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 5,
                            Description = "نوشابه قوطی",
                            ImagePath = "14.jpg",
                            Name = "نوشابه"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "450 گرم ماهی قزل آلا شکم پر، دورچین متناسب فصل",
                            ImagePath = "4.jpg",
                            Name = "خوراک ماهی"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Description = "کباب شیشلیک گوسفندی 450 گرمی، دورچین متناسب فصل",
                            ImagePath = "7.jpg",
                            Name = "کباب شیشلیک"
                        },
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "دو عدد کباب کوبیده مخلوط گوشت گوساله و گوسفندی 130 گرمی، 450 گرم برنج ایرانی، دورچین متناسب فصل",
                            ImagePath = "1.jpg",
                            Name = "چلو کباب کوبیده"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 4,
                            Description = "مرغ ریش شده، جو پرک، سبزی سوپ",
                            ImagePath = "11.jpg",
                            Name = "سوپ جو"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 5,
                            Description = "گازدار",
                            ImagePath = "15.jpg",
                            Name = "دوغ"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "جوجه کباب سینه مرغ زعفرانی 350 گرمی، 450 گرم برنج ایرانی، دورچین متناسب فصل",
                            ImagePath = "2.jpg",
                            Name = "چلو جوجه کباب"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "یک تکه مرغ سس پز 480 گرمی، 450 گرم برنج ایرانی، دورچین متناسب فصل",
                            ImagePath = "3.jpg",
                            Name = "چلو مرغ"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "یک تکه مرغ سس پز 480 گرمی، دورچین متناسب فصل",
                            ImagePath = "5.jpg",
                            Name = "خوراک مرغ"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "500 گرم گوشت گوسفندی، دورچین متناسب فصل",
                            ImagePath = "6.jpg",
                            Name = "خوراک گوشت بره"
                        });
                });

            modelBuilder.Entity("GoodFood.Infrastructure.Persistence.Models.MenuLineData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("FoodId")
                        .IsUnique();

                    b.ToTable("MenuLines");
                });

            modelBuilder.Entity("GoodFood.Infrastructure.Persistence.Models.OrderData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GoodFood.Infrastructure.Persistence.Models.OrderLineData", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("FoodId")
                        .HasColumnType("integer");

                    b.Property<decimal>("FoodPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("OrderId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GoodFood.Infrastructure.Persistence.Models.CartLineData", b =>
                {
                    b.HasOne("GoodFood.Infrastructure.Persistence.Models.CartData", "Cart")
                        .WithMany("Lines")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("GoodFood.Infrastructure.Persistence.Models.FoodData", b =>
                {
                    b.HasOne("GoodFood.Infrastructure.Persistence.Models.FoodCategoryData", "Category")
                        .WithMany("Foods")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GoodFood.Infrastructure.Persistence.Models.MenuLineData", b =>
                {
                    b.HasOne("GoodFood.Infrastructure.Persistence.Models.FoodData", "Food")
                        .WithOne("MenuLine")
                        .HasForeignKey("GoodFood.Infrastructure.Persistence.Models.MenuLineData", "FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("GoodFood.Domain.Entities.MenuLineDetails", "Details", b1 =>
                        {
                            b1.Property<int>("MenuLineDataId")
                                .HasColumnType("integer");

                            b1.HasKey("MenuLineDataId");

                            b1.ToTable("MenuLines");

                            b1.ToJson("Details");

                            b1.WithOwner()
                                .HasForeignKey("MenuLineDataId");

                            b1.OwnsOne("GoodFood.Domain.Entities.Food", "Food", b2 =>
                                {
                                    b2.Property<int>("MenuLineDetailsMenuLineDataId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("CategoryId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<int>("Id")
                                        .HasColumnType("integer");

                                    b2.Property<string>("ImagePath")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("MenuLineDetailsMenuLineDataId");

                                    b2.ToTable("MenuLines");

                                    b2.WithOwner()
                                        .HasForeignKey("MenuLineDetailsMenuLineDataId");
                                });

                            b1.Navigation("Food")
                                .IsRequired();
                        });

                    b.Navigation("Details")
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("GoodFood.Infrastructure.Persistence.Models.OrderLineData", b =>
                {
                    b.HasOne("GoodFood.Infrastructure.Persistence.Models.FoodData", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoodFood.Infrastructure.Persistence.Models.OrderData", "Order")
                        .WithMany("Lines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GoodFood.Infrastructure.Persistence.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GoodFood.Infrastructure.Persistence.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoodFood.Infrastructure.Persistence.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GoodFood.Infrastructure.Persistence.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GoodFood.Infrastructure.Persistence.Models.CartData", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("GoodFood.Infrastructure.Persistence.Models.FoodCategoryData", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("GoodFood.Infrastructure.Persistence.Models.FoodData", b =>
                {
                    b.Navigation("MenuLine");
                });

            modelBuilder.Entity("GoodFood.Infrastructure.Persistence.Models.OrderData", b =>
                {
                    b.Navigation("Lines");
                });
#pragma warning restore 612, 618
        }
    }
}
